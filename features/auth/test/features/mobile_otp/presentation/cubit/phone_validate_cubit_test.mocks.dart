// Mocks generated by Mockito 5.4.4 from annotations
// in auth/test/features/mobile_otp/presentation/cubit/phone_validate_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:auth/features/mobile_otp/data/models/reg_status_request.dart'
    as _i13;
import 'package:auth/features/mobile_otp/data/models/reg_status_response.dart'
    as _i12;
import 'package:auth/features/mobile_otp/data/models/save_device_request.dart'
    as _i17;
import 'package:auth/features/mobile_otp/data/models/save_device_response.dart'
    as _i16;
import 'package:auth/features/mobile_otp/data/models/send_otp_request.dart'
    as _i8;
import 'package:auth/features/mobile_otp/data/models/send_otp_response.dart'
    as _i7;
import 'package:auth/features/mobile_otp/data/models/user_consent_request.dart'
    as _i20;
import 'package:auth/features/mobile_otp/data/models/user_consent_response.dart'
    as _i19;
import 'package:auth/features/mobile_otp/data/models/validate_multiple_device_request.dart'
    as _i15;
import 'package:auth/features/mobile_otp/data/models/validate_multiple_device_response.dart'
    as _i14;
import 'package:auth/features/mobile_otp/data/models/validate_otp_request.dart'
    as _i11;
import 'package:auth/features/mobile_otp/data/models/validate_otp_response.dart'
    as _i10;
import 'package:auth/features/mobile_otp/domain/repositories/phone_validate_repository.dart'
    as _i2;
import 'package:auth/features/mobile_otp/domain/usecases/phone_validate_usecase.dart'
    as _i4;
import 'package:auth/features/mobile_otp/domain/usecases/user_consent_usecase.dart'
    as _i18;
import 'package:auth/features/mobile_otp/domain/usecases/validate_otp_usecase.dart'
    as _i9;
import 'package:core/config/error/failure.dart' as _i6;
import 'package:core/utils/pref_utils.dart' as _i21;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhoneValidateRepository_0 extends _i1.SmartFake
    implements _i2.PhoneValidateRepository {
  _FakePhoneValidateRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhoneValidateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneValidateUseCase extends _i1.Mock
    implements _i4.PhoneValidateUseCase {
  MockPhoneValidateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PhoneValidateRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePhoneValidateRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PhoneValidateRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.SendOtpResponse>> call(
          _i8.SendOtpRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.SendOtpResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.SendOtpResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.SendOtpResponse>>);
}

/// A class which mocks [ValidateOtpUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidateOtpUsecase extends _i1.Mock
    implements _i9.ValidateOtpUsecase {
  MockValidateOtpUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PhoneValidateRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePhoneValidateRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PhoneValidateRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.ValidateOtpResponse>> call(
          _i11.ValidateOtpRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i10.ValidateOtpResponse>>.value(
                _FakeEither_1<_i6.Failure, _i10.ValidateOtpResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.ValidateOtpResponse>>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, _i12.RegisterStatusResponse>> getCustRegStatus(
          _i13.RegisterStatusRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustRegStatus,
          [params],
        ),
        returnValue: _i5
            .Future<_i3.Either<_i6.Failure, _i12.RegisterStatusResponse>>.value(
            _FakeEither_1<_i6.Failure, _i12.RegisterStatusResponse>(
          this,
          Invocation.method(
            #getCustRegStatus,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i12.RegisterStatusResponse>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i14.ValidateMultipleDeviceResponse>>
      validateMultipleDevice(_i15.ValidateMultiPleDeviceRequest? params) =>
          (super.noSuchMethod(
            Invocation.method(
              #validateMultipleDevice,
              [params],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i6.Failure,
                        _i14.ValidateMultipleDeviceResponse>>.value(
                _FakeEither_1<_i6.Failure, _i14.ValidateMultipleDeviceResponse>(
              this,
              Invocation.method(
                #validateMultipleDevice,
                [params],
              ),
            )),
          ) as _i5.Future<
              _i3.Either<_i6.Failure, _i14.ValidateMultipleDeviceResponse>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i16.SaveDeviceResponse>> saveDevice(
          _i17.SaveDeviceRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDevice,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i16.SaveDeviceResponse>>.value(
                _FakeEither_1<_i6.Failure, _i16.SaveDeviceResponse>(
          this,
          Invocation.method(
            #saveDevice,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i16.SaveDeviceResponse>>);
}

/// A class which mocks [UserConsentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserConsentUseCase extends _i1.Mock
    implements _i18.UserConsentUseCase {
  MockUserConsentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  _i2.PhoneValidateRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePhoneValidateRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PhoneValidateRepository);

  _i5.Future<_i3.Either<_i6.Failure, _i19.UserConsentResponse>> call(
          _i20.UserConsentRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i19.UserConsentResponse>>.value(
                _FakeEither_1<_i6.Failure, _i19.UserConsentResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i19.UserConsentResponse>>);
}

/// A class which mocks [PrefUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefUtils extends _i1.Mock implements _i21.PrefUtils {
  MockPrefUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void clearPreferencesData() => super.noSuchMethod(
        Invocation.method(
          #clearPreferencesData,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
