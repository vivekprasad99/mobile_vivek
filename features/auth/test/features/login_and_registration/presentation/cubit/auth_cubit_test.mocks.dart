// Mocks generated by Mockito 5.4.4 from annotations
// in auth/test/features/login_and_registration/presentation/cubit/auth_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:auth/features/login_and_registration/data/models/authentication_request.dart'
    as _i13;
import 'package:auth/features/login_and_registration/data/models/authentication_response.dart'
    as _i12;
import 'package:auth/features/login_and_registration/data/models/authentication_ucic_request.dart'
    as _i15;
import 'package:auth/features/login_and_registration/data/models/authentication_ucic_response.dart'
    as _i14;
import 'package:auth/features/login_and_registration/data/models/login_request.dart'
    as _i22;
import 'package:auth/features/login_and_registration/data/models/login_response.dart'
    as _i21;
import 'package:auth/features/login_and_registration/data/models/mpin_request.dart'
    as _i10;
import 'package:auth/features/login_and_registration/data/models/mpin_response.dart'
    as _i9;
import 'package:auth/features/login_and_registration/data/models/postlogin_token_response.dart'
    as _i23;
import 'package:auth/features/login_and_registration/data/models/register_user_request.dart'
    as _i8;
import 'package:auth/features/login_and_registration/data/models/register_user_response.dart'
    as _i7;
import 'package:auth/features/login_and_registration/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:auth/features/login_and_registration/domain/usecases/login_usecase.dart'
    as _i20;
import 'package:auth/features/login_and_registration/domain/usecases/registration_usecase.dart'
    as _i4;
import 'package:auth/features/login_and_registration/domain/usecases/second_factor_auth_usecase.dart'
    as _i11;
import 'package:core/config/error/failure.dart' as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:local_auth/src/local_auth.dart' as _i16;
import 'package:local_auth_android/local_auth_android.dart' as _i17;
import 'package:local_auth_darwin/local_auth_darwin.dart' as _i18;
import 'package:local_auth_windows/local_auth_windows.dart' as _i19;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegistrationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistrationUseCase extends _i1.Mock
    implements _i4.RegistrationUseCase {
  MockRegistrationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.RegisterUserResponse>> call(
          _i8.RegisterUserRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.RegisterUserResponse>>.value(
                _FakeEither_1<_i6.Failure, _i7.RegisterUserResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.RegisterUserResponse>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.MPinResponse>> createMPin(
          _i10.MPinRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMPin,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i9.MPinResponse>>.value(
                _FakeEither_1<_i6.Failure, _i9.MPinResponse>(
          this,
          Invocation.method(
            #createMPin,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.MPinResponse>>);
}

/// A class which mocks [SecondFactorAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecondFactorAuthUseCase extends _i1.Mock
    implements _i11.SecondFactorAuthUseCase {
  MockSecondFactorAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i12.AuthenticationResponse>> call(
          _i13.AuthenticateSingleUcicRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5
            .Future<_i3.Either<_i6.Failure, _i12.AuthenticationResponse>>.value(
            _FakeEither_1<_i6.Failure, _i12.AuthenticationResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i12.AuthenticationResponse>>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, _i14.AuthenticateMultiUcicResponse>> authenticateUCIC(
          _i15.AuthenticateMultiUcicRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateUCIC,
          [params],
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.Failure, _i14.AuthenticateMultiUcicResponse>>.value(
            _FakeEither_1<_i6.Failure, _i14.AuthenticateMultiUcicResponse>(
          this,
          Invocation.method(
            #authenticateUCIC,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i14.AuthenticateMultiUcicResponse>>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i16.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get canCheckBiometrics => (super.noSuchMethod(
        Invocation.getter(#canCheckBiometrics),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> authenticate({
    required String? localizedReason,
    Iterable<_i17.AuthMessages>? authMessages = const [
      _i18.IOSAuthMessages(),
      _i17.AndroidAuthMessages(),
      _i19.WindowsAuthMessages(),
    ],
    _i17.AuthenticationOptions? options = const _i17.AuthenticationOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #localizedReason: localizedReason,
            #authMessages: authMessages,
            #options: options,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> stopAuthentication() => (super.noSuchMethod(
        Invocation.method(
          #stopAuthentication,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(
          #isDeviceSupported,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i17.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i5.Future<List<_i17.BiometricType>>.value(<_i17.BiometricType>[]),
      ) as _i5.Future<List<_i17.BiometricType>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i20.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i21.LoginResponse>> call(
          _i22.LoginRequest? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i21.LoginResponse>>.value(
                _FakeEither_1<_i6.Failure, _i21.LoginResponse>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i21.LoginResponse>>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, _i23.PostLoginTokenResponse>> getPostLoginToken(
    String? mobileNumber,
    String? mPin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostLoginToken,
          [
            mobileNumber,
            mPin,
          ],
        ),
        returnValue: _i5
            .Future<_i3.Either<_i6.Failure, _i23.PostLoginTokenResponse>>.value(
            _FakeEither_1<_i6.Failure, _i23.PostLoginTokenResponse>(
          this,
          Invocation.method(
            #getPostLoginToken,
            [
              mobileNumber,
              mPin,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i23.PostLoginTokenResponse>>);
}
