import 'package:core/utils/size_utils.dart';
import 'package:core/utils/pref_utils.dart';
import 'package:flutter/material.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils.getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray600,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 145,
        space: 145,
        color: appTheme.blueGray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: const Color(0XFF5B5B5B),
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 32.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 28.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF322F35),
    primaryContainer: Color(0XFFA9A8AA),

    // Error colors
    errorContainer: Color(0XFF4C4C4C),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0X7C1D1B20),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray90001 => const Color(0XFF333333);
  Color get blueGray50 => const Color(0XFFF1F1F1);
  Color get blueGray900 => const Color(0XFF323232);
  Color get gray60001 => const Color(0XFF79747E);

  // Gray
  Color get gray100 => const Color(0XFFF5EFF7);
  Color get gray200 => const Color(0XFFE9E9E9);
  Color get gray400 => const Color(0XFFB7B7B7);
  Color get gray40001 => const Color(0XFFB8B8B8);
  Color get gray40002 => const Color(0XFFB9B9B9);
  Color get gray50 => const Color(0XFFF9F9F9);
  Color get gray500 => const Color(0XFF979797);
  Color get gray50001 => const Color(0XFFA5A4A4);
  Color get gray600 => const Color(0XFF79747E);
  Color get gray700 => const Color(0XFF5D5D5D);
  Color get gray70001 => const Color(0XFF5B5B5B);
  Color get gray70002 => const Color(0XFF5E6067);
  Color get gray800 => const Color(0XFF3C3B3B);
  Color get gray80001 => const Color(0XFF49454F);
  Color get gray80002 => const Color(0XFF3B3B3B);

  Color get gray90001 => const Color(0XFF1D1B20);
  Color get gray300 => const Color(0XFFE2E2E2);

  // Green
  Color get green50 => const Color(0XFFE8F7EB);
  Color get gray900 => const Color(0XFF1E2126);

  Color get gray90002 => const Color(0XFF111827);
  Color get gray90003 => const Color(0XFF202124);

  // Indigo
  Color get indigo100 => const Color(0XFFC6C5DE);
  Color get indigo800 => const Color(0XFF1B438B);

  // Purple
  Color get purple100 => const Color(0XFFDAACFF);

  // Red
  Color get red700 => const Color(0XFFDA1E28);
  Color get red900 => const Color(0XFFB3261E);
  Color get whiteA700 => const Color(0XFFFFFFFF);

  Color get red90001 => const Color(0XFFA10101);
  Color get deepPurple400 => const Color(0XFF775ACB);
  Color get deepPurple60099 => const Color(0X99532CC2);
  Color get gray60002 => const Color(0XFF7C7C7C);
  
  Color get pink2002 => const Color(0XFFEDE0E3);

  //TODO enable as seperate colors for app status if it is not same as login registration and other early features
  //Color get gray40002 => Colors.black38;
  //Color get gray90001 => const Color(0XFF231F20);
  //Color get blueGray90001 => const Color(0XFF333333);
  //Color get gray500 => Color(0XFFA5A4A4);
  //Color get gray700 => Color(0XFF5B5B5B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
