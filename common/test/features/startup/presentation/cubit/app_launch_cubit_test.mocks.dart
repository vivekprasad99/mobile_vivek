// Mocks generated by Mockito 5.4.4 from annotations
// in common/test/features/startup/presentation/cubit/app_launch_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:core/config/managers/device_manager.dart' as _i3;
import 'package:core/config/network/connectivity_manager.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivity_0 extends _i1.SmartFake implements _i2.Connectivity {
  _FakeConnectivity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceManager extends _i1.Mock implements _i3.DeviceManager {
  MockDeviceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get isValidApp => (super.noSuchMethod(
        Invocation.getter(#isValidApp),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#isValidApp),
        ),
      ) as String);

  @override
  _i5.Future<String?> getDeviceId() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceId,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<bool> isAppJailBrokenOrRooted() => (super.noSuchMethod(
        Invocation.method(
          #isAppJailBrokenOrRooted,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<dynamic> isAppCloned() => (super.noSuchMethod(
        Invocation.method(
          #isAppCloned,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<bool> enableSecureMode() => (super.noSuchMethod(
        Invocation.method(
          #enableSecureMode,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String> getAppVersion() => (super.noSuchMethod(
        Invocation.method(
          #getAppVersion,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getAppVersion,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> getDisplayAppVersion() => (super.noSuchMethod(
        Invocation.method(
          #getDisplayAppVersion,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayAppVersion,
            [],
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [ConnectivityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityManager extends _i1.Mock
    implements _i6.ConnectivityManager {
  MockConnectivityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_0(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i2.Connectivity);

  @override
  set connectivity(_i2.Connectivity? _connectivity) => super.noSuchMethod(
        Invocation.setter(
          #connectivity,
          _connectivity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connectivitySubscription(
          _i5.StreamSubscription<dynamic>? _connectivitySubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectivitySubscription,
          _connectivitySubscription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic check({required Function? onChanged}) =>
      super.noSuchMethod(Invocation.method(
        #check,
        [],
        {#onChanged: onChanged},
      ));

  @override
  _i5.Future<bool> isVpnConnected() => (super.noSuchMethod(
        Invocation.method(
          #isVpnConnected,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
